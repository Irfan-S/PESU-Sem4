#include "graphSearch.h"
#include <stdio.h>
// Header file for graph search

//typedef struct {
//    int numDeliveryFrogs;
//    int maxHouses;
//} Result;

// Given an unweighted and undirected graph, 
// check if it is a tree topology or not
// Return true/false
bool isTree(int n, const int graph[][n]){
	int visited[1000];
	//bool flag = true;
	int i = 0;
	int j=0;
	int sum=0;
	for (i=0;i<n;i++){
		sum=0;
		for(j=0;j<n;j++){
			if(graph[i][j]==1){sum++;}
			if(sum>2){ return false;}		
		}
		if(sum<2){return false;
	}
	return true;
}

void dfs(int n, const int safeSeq[][n],int i,int* visited,int* count,int k){
	visited[i]=1;
	(*count)++;
	for(j = 0 ; j < n; j++)
	{
		if(graph[i][j] && !visited[j] && abs(i - j) <= k)
		{
			dfs(n, graph, j, visited, count, k);
		}
	}
}

// In FrogLand, Pepe the Frog wants to build a food delivery app after being inspired by Swiggy.
// Frogs in FrogLand are not very friendly and don't allow frogs to jump from 
// HouseX to HouseY if they are enemies. Each house in FrogLand has a safeSequence 
// that mentions which houses are safe to jump onto, from the current house.
// No two frogs can cover the same house. Houses are numbered from 0 to n-1.
// Your task is to help Pepe find how many delivery frogs are required for his swamp,
// and to find the maximum number of houses any delivery agent has to visit.
// Note: Frogs can start at any house initially.
// Return a structure Result, with its members assigned.
Result pepesAnswers(int n, const int safeSeq[][n])
{
	Result a;
	a.numDeliveryFrogs = 0;
	a.maxHouses = 0;
	int count = 0;
	int visited[1000];
	int i = 0;
	for(i = 0; i < n; i++)
	{
		visited[i] = 0;
	}
	for(i = 0; i < n; i++)
	{
		if(!visited[i])
		{
			count = 0;
			dfs(n, safeSeq, i, visited, &count, n);
			a.numDeliveryFrogs++;
			if(count > a.maxHouses)
			{
				a.maxHouses = count;
			}
		}
	}
	return a;
}

Result pepesAnswersWithK(int n, const int safeSeq[][n], int k)
{
	Result a;
	a.numDeliveryFrogs = 0;
	a.maxHouses = 0;
	int count = 0;
	int visited[1000];
	int i = 0;
	for(i = 0; i < n; i++)
	{
		visited[i] = 0;
	}
	for(i = 0; i < n; i++)
	{
		if(!visited[i])
		{
			count = 0;
			dfs(n, safeSeq, i, visited, &count, k);
			a.numDeliveryFrogs++;
			if(count > a.maxHouses)
			{
				a.maxHouses = count;
			}
		}
	}
	return a;
}
